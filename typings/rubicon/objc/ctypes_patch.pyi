"""
This type stub file was generated by pyright.
"""

import ctypes
import sys

"""This module provides a workaround to allow callback functions to return composite
types (most importantly structs).

Currently, ctypes callback functions (created by passing a Python callable to a
CFUNCTYPE object) are only able to return what ctypes considers a "simple" type. This
includes void (None), scalars (c_int, c_float, etc.), c_void_p, c_char_p, c_wchar_p, and
py_object. Returning "composite" types (structs, unions, and non-"simple" pointers) is
not possible. This issue has been reported on the Python bug tracker (
https://github.com/python/cpython/issues/49960).

For pointers, the easiest workaround is to return a c_void_p instead of the correctly
typed pointer, and to cast the value on both sides. For structs and unions there is no
easy workaround, which is why this somewhat hacky workaround is necessary.
"""
if sys.version_info < (3, 6) or sys.version_info >= (3, 15): ...

class PyTypeObject(ctypes.Structure): ...

class PyObject(ctypes.Structure):
    _fields_ = ...

class PyVarObject(ctypes.Structure):
    _fields_ = ...

class ffi_type(ctypes.Structure): ...

GETFUNC = ...
if sys.version_info < (3, 10): ...
else:
    SETFUNC = ...
if sys.version_info < (3, 13):
    PyDict_Type = ...
    class PyDictObject(ctypes.Structure):
        _fields_ = ...

    class StgDictObject(ctypes.Structure):
        _fields_ = ...

    class mappingproxyobject(ctypes.Structure):
        _fields_ = ...

    def unwrap_mappingproxy(proxy):  # -> Any:
        """Return the mapping contained in a mapping proxy object."""
        ...

    def get_stgdict_of_type(tp):  # -> StgDictObject:
        """Return the given ctypes type's StgDict object. If the object's dict is not a
        StgDict, an error is raised.

        This function is roughly equivalent to the PyType_stgdict function in the ctypes
        source code. We cannot use that function directly, because it is not part of
        CPython's public C API, and thus not accessible on some systems (see #113).
        """
        ...

else: ...

def make_callback_returnable(ctype):
    """Modify the given ctypes type so it can be returned from a callback function.

    This function may be used as a decorator on a struct/union declaration.

    The method is idempotent; it only modifies the type the first time it is invoked on
    a type.
    """
    ...
