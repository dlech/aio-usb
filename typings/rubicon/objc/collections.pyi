"""
This type stub file was generated by pyright.
"""

from .api import (
    NSArray,
    NSDictionary,
    NSMutableArray,
    NSMutableDictionary,
    NSString,
    ObjCInstance,
    for_objcclass,
)

NSOrderedAscending = ...
NSOrderedSame = ...
NSOrderedDescending = ...
NSLiteralSearch = ...
NSBackwardsSearch = ...

@for_objcclass(NSString)
class ObjCStrInstance(ObjCInstance):
    """Provides Pythonic operations on NSString objects that mimic those of Python's
    str.

    Note that str objects consist of Unicode code points, whereas NSString objects
    consist of UTF-16 code units. These are not equivalent for code points greater than
    U+FFFF. For performance and simplicity, ObjCStrInstance objects behave as sequences
    of UTF-16 code units, like NSString. (Individual UTF-16 code units are represented
    as Python str objects of length 1.) If you need to access or iterate over code
    points instead of UTF-16 code units, use str(nsstring) to convert the NSString to a
    Python str first.
    """
    def __str__(self) -> str: ...
    def __fspath__(self):  # -> Any:
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __contains__(self, value):  # -> bool | Any:
        ...
    def __len__(self):  # -> ObjCBoundMethod | Any:
        ...
    def __getitem__(self, key):  # -> Any | str:
        ...
    def __add__(self, other):  # -> Any | _NotImplementedType:
        ...
    def __radd__(self, other):  # -> Any | _NotImplementedType:
        ...
    def __mul__(
        self, other
    ):  # -> _NotImplementedType | Any | ObjCInstance | type[__class_ObjCClass] | None:
        ...
    def __rmul__(
        self, other
    ):  # -> _NotImplementedType | Any | ObjCInstance | type[__class_ObjCClass] | None:
        ...
    def find(self, sub, start=..., end=...):  # -> int | Any:
        ...
    def index(self, sub, start=..., end=...):  # -> int | Any:
        ...
    def rfind(self, sub, start=..., end=...):  # -> int | Any:
        ...
    def rindex(self, sub, start=..., end=...):  # -> int | Any:
        ...
    def __getattr__(self, attr):  # -> ObjCBoundMethod | Any:
        ...

@for_objcclass(NSArray)
class ObjCListInstance(ObjCInstance):
    def __getitem__(
        self, item
    ):  # -> Any | ObjCInstance | type[__class_ObjCClass] | None:
        ...
    def __len__(self):  # -> c_void_p | Any:
        ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def __contains__(self, item):  # -> Any:
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def index(self, value):  # -> Any:
        ...
    def count(self, value):  # -> int:
        ...
    def copy(self):  # -> type[__class_ObjCClass] | ObjCInstance | None:
        ...

@for_objcclass(NSMutableArray)
class ObjCMutableListInstance(ObjCListInstance):
    def __setitem__(self, item, value):  # -> None:
        ...
    def __delitem__(self, item):  # -> None:
        ...
    def copy(self):  # -> Any:
        ...
    def append(self, value):  # -> None:
        ...
    def extend(self, values):  # -> None:
        ...
    def clear(self):  # -> None:
        ...
    def pop(self, item=...):  # -> Any | ObjCInstance | type[__class_ObjCClass] | None:
        ...
    def remove(self, value):  # -> None:
        ...
    def reverse(self):  # -> None:
        ...
    def insert(self, idx, value):  # -> None:
        ...

@for_objcclass(NSDictionary)
class ObjCDictInstance(ObjCInstance):
    def __getitem__(self, item):  # -> Any:
        ...
    def __len__(self):  # -> ObjCBoundMethod | Any:
        ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def __contains__(self, item):  # -> bool:
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def get(self, item, default=...):  # -> Any | None:
        ...
    def keys(self):  # -> Any:
        ...
    def values(self):  # -> Any:
        ...
    def items(self):  # -> Generator[tuple[Any, Any], Any, None]:
        ...
    def copy(self):  # -> type[__class_ObjCClass] | ObjCInstance | None:
        ...

@for_objcclass(NSMutableDictionary)
class ObjCMutableDictInstance(ObjCDictInstance):
    no_pop_default = ...
    def __setitem__(self, item, value):  # -> None:
        ...
    def __delitem__(self, item):  # -> None:
        ...
    def copy(self):  # -> Any:
        ...
    def clear(self):  # -> None:
        ...
    def pop(self, item, default=...):  # -> object | Any:
        ...
    def popitem(self):  # -> tuple[Any, Any]:
        ...
    def setdefault(self, key, default=...):  # -> Any | None:
        ...
    def update(self, new=..., **kwargs):  # -> None:
        ...
